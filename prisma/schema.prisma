generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String               @unique
  image                String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  password             String?
  emailVerified        DateTime?
  achievements         Json?
  bio                  String?
  level                String?
  accounts             Account[]
  conversations        Conversation[]
  documentAccess       DocumentAccess[]
  messages             Message[]
  quizzes              Quiz[]
  quizResults          QuizResult[]
  sessions             Session[]
  subscription         Subscription?
  userDevices          UserDevice[]
  passwordResetTokens  PasswordResetToken[]
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([updatedAt])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String
  createdAt      DateTime     @default(now())
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String   @id @default(cuid())
  sessionToken   String   @unique
  userId         String
  expires        DateTime
  clientDeviceId String?  @map("client_device_id")
  userAgent      String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String    @unique
  startDate        DateTime  @default(now())
  endDate          DateTime?
  isActive         Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isTrial          Boolean   @default(false)
  paymentReference String?
  planType         String    @default("none")
  user             User      @relation(fields: [userId], references: [id])
}

model DocumentAccess {
  id         String   @id @default(cuid())
  userId     String
  documentId String
  accessedAt DateTime @default(now())
  document   Document @relation(fields: [documentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([documentId])
}

model Document {
  id         String           @id @default(cuid())
  accessLogs DocumentAccess[]
}

model Timetable {
  id          String   @id @default(cuid())
  level       String
  day         String
  timeSlot    String
  courseCode  String
  courseTitle String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([level, day, timeSlot])
}

model Quiz {
  id           String         @id @default(cuid())
  title        String
  courseCode   String
  courseTitle  String
  topic        String?
  level        String
  difficulty   String         @default("medium")
  numQuestions Int
  timeLimit    Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions    QuizQuestion[]
  results      QuizResult[]

  @@index([userId])
  @@index([courseCode])
  @@index([level])
  @@index([createdAt])
}

model QuizQuestion {
  id            String   @id @default(cuid())
  quizId        String
  questionText  String
  questionType  String
  options       Json?
  correctAnswer String
  explanation   String?
  points        Int      @default(1)
  order         Int
  createdAt     DateTime @default(now())
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([order])
}

model QuizResult {
  id          String   @id @default(cuid())
  quizId      String
  userId      String
  answers     Json
  score       Float
  maxScore    Float
  percentage  Float
  timeTaken   Int?
  feedback    Json?
  completedAt DateTime @default(now())
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([userId])
  @@index([completedAt])
}

model UserDevice {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  firstUsed DateTime @default(now())
  lastUsed  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}
