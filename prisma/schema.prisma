// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  image         String?
  password      String?        // Added for credentials authentication
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bio           String?        // User bio
  level         String?        // Academic level/year
  achievements  Json?          // Achievements and badges
  emailVerified DateTime?
  conversations Conversation[]
  messages      Message[]
  accounts      Account[]      // Added for relation
  sessions      Session[]      // Added for relation
  subscription  Subscription?
  documentAccess  DocumentAccess[]
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([updatedAt])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String       // 'user' or 'assistant'
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientDeviceId String?  @map("client_device_id")
  userAgent     String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  isActive         Boolean  @default(false)
  isTrial          Boolean  @default(false)
  planType         String   @default("none") // "trial", "paid", "none"
  startDate        DateTime @default(now())
  endDate          DateTime?
  paymentReference String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model DocumentAccess {
  id        String   @id @default(cuid())
  userId    String
  documentId String
  accessedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  document  Document @relation(fields: [documentId], references: [id])

  @@index([userId])
  @@index([documentId])
}

model Document {
  id              String           @id @default(cuid())
  accessLogs      DocumentAccess[]
}

model Timetable {
  id          String   @id @default(cuid())
  level       String   // e.g., "100", "200", "300", etc.
  day         String   // e.g., "Monday", "Tuesday", etc.
  timeSlot    String   // e.g., "8:00 AM - 9:00 AM"
  courseCode  String   // e.g., "CHM 101"
  courseTitle String   // e.g., "Introduction to Chemistry"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([level, day, timeSlot])
}